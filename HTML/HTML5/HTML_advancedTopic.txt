1.  <!DOCTYPE> 声明帮助浏览器正确地显示网页。
Web 世界中存在许多不同的文档。只有了解文档的类型，浏览器才能正确地显示文档。
HTML 也有多个不同的版本，只有完全明白页面中使用的确切 HTML 版本，浏览器才能完全正确地显示出 HTML 页面。这就是 <!DOCTYPE> 的用处。
<!DOCTYPE> 不是 HTML 标签。它为浏览器提供一项信息（声明），即 HTML 是用什么版本编写的。

实例
带有 HTML5 DOCTYPE 的 HTML 文档：
    <!DOCTYPE html>
    <html>
    <head>
    <title>Title of the document</title>
    </head>
    <body>
    The content of the document......
    </body>
    </html>

常用的声明
HTML5
    <!DOCTYPE html>
HTML 4.01
    <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
    "http://www.w3.org/TR/html4/loose.dtd">
XHTML 1.0
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">


2.  HTML 头部元素
<head> 元素是所有头部元素的容器。<head> 内的元素可包含脚本，指示浏览器在何处可以找到样式表，提供元信息，等等。
以下标签都可以添加到 head 部分：<title>、<base>、<link>、<meta>、<script> 以及 <style>。

HTML <title> 元素
<title> 标签定义文档的标题。
title 元素在所有 HTML/XHTML 文档中都是必需的。
title 元素能够：
        定义浏览器工具栏中的标题
        提供页面被添加到收藏夹时显示的标题
        显示在搜索引擎结果中的页面标题
一个简化的 HTML 文档：
    <!DOCTYPE html>
    <html>
    <head>
    <title>Title of the document</title>
    </head>
    <body>
    The content of the document......
    </body>
    </html>

HTML <base> 元素
<base> 标签为页面上的所有链接规定默认地址或默认目标（target）：
    <head>
    <base href="http://www.w3school.com.cn/images/" />
    <base target="_blank" />
    </head>

HTML <link> 元素
<link> 标签定义文档与外部资源之间的关系。
<link> 标签最常用于连接样式表：
    <head>
    <link rel="stylesheet" type="text/css" href="mystyle.css" />
    </head>

HTML <style> 元素
<style> 标签用于为 HTML 文档定义样式信息。
您可以在 style 元素内规定 HTML 元素在浏览器中呈现的样式：
    <head>
    <style type="text/css">
    body {background-color:yellow}
    p {color:blue}
    </style>
    </head>

HTML <meta> 元素
元数据（metadata）是关于数据的信息。
<meta> 标签提供关于 HTML 文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。
典型的情况是，meta 元素被用于规定页面的描述、关键词、文档的作者、最后修改时间以及其他元数据。
<meta> 标签始终位于 head 元素中。
元数据可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。
针对搜索引擎的关键词
一些搜索引擎会利用 meta 元素的 name 和 content 属性来索引您的页面。
下面的 meta 元素定义页面的描述：
    <meta name="description" content="Free Web tutorials on HTML, CSS, XML" />
下面的 meta 元素定义页面的关键词：
    <meta name="keywords" content="HTML, CSS, XML" />
name 和 content 属性的作用是描述页面的内容。

HTML <script> 元素
    <script> 标签用于定义客户端脚本，比如 JavaScript。
    

3.  HTML script 元素
<script> 标签用于定义客户端脚本，比如 JavaScript。
script 元素既可包含脚本语句，也可通过 src 属性指向外部脚本文件。
必需的 type 属性规定脚本的 MIME 类型。
JavaScript 最常用于图片操作、表单验证以及内容动态更新。
下面的脚本会向浏览器输出“Hello World!”：
    <script type="text/javascript">
    document.write("Hello World!")
    </script>

<noscript> 标签
<noscript> 标签提供无法使用脚本时的替代内容，比方在浏览器禁用脚本时，或浏览器不支持客户端脚本时。
noscript 元素可包含普通 HTML 页面的 body 元素中能够找到的所有元素。
只有在浏览器不支持脚本或者禁用脚本时，才会显示 noscript 元素中的内容：
    <script type="text/javascript">
    document.write("Hello World!")
    </script>
    <noscript>Your browser does not support JavaScript!</noscript>

如何应付老式的浏览器
如果浏览器压根没法识别 <script> 标签，那么 <script> 标签所包含的内容将以文本方式显示在页面上。为了避免这种情况发生，你应该将脚本隐藏在注释标签当中。那些老的浏览器（无法识别 <script> 标签的浏览器）将忽略这些注释，所以不会将标签的内容显示到页面上。而那些新的浏览器将读懂这些脚本并执行它们，即使代码被嵌套在注释标签内。
实例
JavaScript:
    <script type="text/javascript">
    <!--
    document.write("Hello World!")
    //-->
    </script>


4.  HTML 字符实体
HTML 中的预留字符必须被替换为字符实体。
在 HTML 中，某些字符是预留的。
在 HTML 中不能使用小于号（<）和大于号（>），这是因为浏览器会误认为它们是标签。
如果希望正确地显示预留字符，我们必须在 HTML 源代码中使用字符实体（character entities）。
字符实体类似这样：
    &entity_name;
    或者
    &#entity_number;
如需显示小于号，我们必须这样写：&lt; 或 &#60;
提示：使用实体名而不是数字的好处是，名称易于记忆。不过坏处是，浏览器也许并不支持所有实体名称（对实体数字的支持却很好）。

不间断空格（non-breaking space）
HTML 中的常用字符实体是不间断空格(&nbsp;)。
浏览器总是会截短 HTML 页面中的空格。如果您在文本中写 10 个空格，在显示该页面之前，浏览器会删除它们中的 9 个。如需在页面中增加空格的数量，您需要使用 &nbsp; 字符实体。

HTML 中有用的字符实体
注释：实体名称对大小写敏感！
显示结果 	描述 	实体名称 	实体编号
        空格 	&nbsp; 	&#160;
    < 	小于号 	&lt; 	&#60;
    > 	大于号 	&gt; 	&#62;
    & 	和号 	&amp; 	&#38;
    " 	引号 	&quot; 	&#34;
    ' 	撇号  	&apos;  &#39;
                (IE不支持) 	
    ￠ 	分 	    &cent; 	&#162;
    £ 	镑 	    &pound; &#163;
    ¥ 	日圆 	&yen; 	&#165;
    € 	欧元 	&euro; 	&#8364;
    § 	小节 	&sect; 	&#167;
    © 	版权 	&copy; 	&#169;
    ® 	注册商标 	&reg; 	&#174;
    ™ 	商标 	&trade; &#8482;
    × 	乘号 	&times; &#215;
    ÷ 	除号 	&divide;&#247;


5.  HTML 统一资源定位器
URL - Uniform Resource Locator
当您点击 HTML 页面中的某个链接时，对应的 <a> 标签指向万维网上的一个地址。
统一资源定位器（URL）用于定位万维网上的文档（或其他数据）。

网址，比如 http://www.w3school.com.cn/html/index.asp，遵守以下的语法规则：
scheme://host.domain:port/path/filename
解释：
    scheme - 定义因特网服务的类型。最常见的类型是 http
    host - 定义域主机（http 的默认主机是 www）
    domain - 定义因特网域名，比如 w3school.com.cn
    :port - 定义主机上的端口号（http 的默认端口号是 80）
    path - 定义服务器上的路径（如果省略，则文档必须位于网站的根目录中）。
    filename - 定义文档/资源的名称
编者注：URL 的英文全称是 Uniform Resource Locator，中文也译为“统一资源定位符”。

URL Schemes
以下是其中一些最流行的 scheme：
    Scheme 	访问 	        用于...
    http 	超文本传输协议 	以 http:// 开头的普通网页。不加密。
    https 	安全超文本传输协议 安全网页。加密所有信息交换。
    ftp 	文件传输协议 	    用于将文件下载或上传至网站。
    file 	  	            您计算机上的文件。


6.  HTML URL 字符编码
URL 只能使用 ASCII 字符集来通过因特网进行发送。
由于 URL 常常会包含 ASCII 集合之外的字符，URL 必须转换为有效的 ASCII 格式。
URL 编码使用 "%" 其后跟随两位的十六进制数来替换非 ASCII 字符。
URL 不能包含空格。URL 编码通常使用 + 来替换空格。

URL 编码示例
字符 	URL 编码
    € 	%80
    £ 	%A3
    © 	%A9
    ® 	%AE
    À 	%C0
    Á 	%C1
    Â 	%C2
    Ã 	%C3
    Ä 	%C4
    Å 	%C5
